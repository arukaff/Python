# Задание 1. Модуль для подсчета количества повторений слов
# Создайте модуль с функцией, которая получает список слов и возвращает
# словарь, в котором ключи — это слова, а значения — количество их повторений
# в списке.

from pkg import mod

print(mod.set_dict(['ddd','sss','ddd','ddd','sss','aaa']))


# Задача 2. Модуль для удаления дублирующихся подряд символов
# Напишите модуль с функцией, которая принимает строку и возвращает строку с
# удаленными дублирующимися подряд идущими символами. Например, строка
# "aabbccaa" должна быть преобразована в "abca".

def sort_srt(_str: str) ->str:
    if len(_str)==0:
        return _str
    st=[_str[0]]
    for s in _str:
        if s !=st[-1]:
            st.append(s)
    return ''.join(st)

print(sort_srt('ssdffrfss'))

# Задача 3. Модуль для нахождения уникальных для обоих списков
# элементов
# Создайте модуль с функцией, которая принимает два списка и возвращает
# список, содержащий только элементы, которые уникальны для обоих списков.

sl_1=['Модуль', 'для', 'нахождения', 'уникальных', 'для', 'обоих', 'списков']
sl_2=['список', 'содержащий', 'только', 'элементы', 'которые', 'уникальны', 'для', 'обоих', 'списков']

def div_list(sl_1:list,sl_2:list) ->list:
    s_1, s_2 = set(sl_1), set(sl_2)
    return list((s_1-s_2) | (s_2-s_1))
print (div_list(sl_1,sl_2))

# Задача 5. Модуль для проверки ферзей
# Добавьте в пакет, созданный на семинаре шахматный модуль. Внутри него
# напишите код, решающий задачу о 8 ферзях. Известно, что на доске 8×8 можно
# расставить 8 ферзей так, чтобы они не били друг друга. Вам дана расстановка 8
# ферзей на доске, определите, есть ли среди них пара бьющих друг друга.
# Программа получает на вход восемь пар чисел, каждое число от 1 до 8 -
# координаты 8 ферзей. Если ферзи не бьют друг друга верните истину, а если бьют
# - ложь.

def are_queens_safe(positions):
    """
    Проверяет, не бьют ли друг друга ферзи на доске 8x8.
    Аргументы:
    positions -- список кортежей, где каждый кортеж содержит
    координаты ферзя (строка, столбец)
    Возвращает:
    True, если ферзи не бьют друг друга; False в противном случае
    """
    def is_under_attack(row, col):
        """
        Проверяет, атакуется ли позиция (row, col) другими ферзями.
        Аргументы:
        row -- строка ферзя
        col -- столбец ферзя
        Возвращает:
        True, если позиция находится под атакой; False в противном
        случае
        """
        for i in range(8):
            if i != row:
            # Проверяем по столбцам и диагоналям
                if (positions[i][1] == col or abs(positions[i][0] - row) == abs(positions[i][1] - col)):
                    return True
            return False
    for i in range(8):
        if is_under_attack(positions[i][0], positions[i][1]):
            return False
        return True
    
    
def generate_random_queens_placement():
    """
    Генерирует случайную расстановку 8 ферзей.
    Возвращает:
    Список из 8 кортежей, каждый из которых содержит случайные
    координаты ферзя
    """
    import random
    return [(i, random.randint(1, 8)) for i in range(8)]


def print_valid_placements(num_placements=4):
    """
    Выводит заданное количество случайных валидных расстановок
    ферзей.
    Аргументы:
    num_placements -- количество случайных валидных расстановок для
    вывода
    """
    count = 0
    while count < num_placements:
        placement = generate_random_queens_placement()
        if are_queens_safe(placement):
            print(placement)
        count += 1
