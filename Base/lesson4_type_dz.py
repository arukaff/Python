# Задача 1. 
# Нахождение наибольшего общего делителя (НОД) двух чисел
# Программа принимает два целых числа и находит их наибольший общий делитель (НОД).

# Запрашиваем у пользователя ввод первого числа
a = int(input("Введите первое число: "))
# Запрашиваем у пользователя ввод второго числа
b = int(input("Введите второе число: "))
# Используем цикл while для реализации алгоритма Евклида
while b: # Пока значение b не равно нулю
    a, b = b, a % b # Присваиваем a значение b, а b значение остатка от деления a на b
# Выводим результат - наибольший общий делитель
print("НОД:", a)


# Задание 2. 
# Преобразование числа в шестнадцатеричное представление
# Напишите программу, которая получает целое число и возвращает его
# шестнадцатеричное строковое представление. Функцию hex используйте для
# проверки своего результата.
hex=[0,1,2,3,4,5,6,7,8,9,'A','B','C','D','E','F']
num: int = 26
res: str=''
while num:
    cur_num=num % 16
    res= str(hex[cur_num])+res
    num//= 16
print(f'для {16} res={res}') 

numbers = [255, 16, 0, -42, 26]
# Определяем символы для цифр в шестнадцатеричной системе
hex_digits = '0123456789ABCDEF'
for number in numbers:
    hex_string = ''
    # Если число равно 0, то возвращаем '0'
    if number == 0:
        hex_string = '0'
    else:
        # Обрабатываем отрицательные числа
        is_negative = number < 0
    if is_negative:
        number = -number
    # Преобразование числа в шестнадцатеричное представление
    while number > 0:
        remainder = number % 16
        hex_string = hex_digits[remainder] + hex_string
        number //= 16
    # Добавляем префикс '-' для отрицательных чисел
    if is_negative:
        hex_string = '-' + hex_string
    print(hex_string)

# Задача 3. 
# Перевод целого числа в римское число
# Программа принимает целое число и возвращает его римское представление в виде строки.

# Вводим целое число
num1=num = int(input("Введите целое число: "))
# Массив значений чисел в десятичной системе
val = [
1000, 900, 500, 400,
100, 90, 50, 40,
10, 9, 5, 4,
1
]
# Массив соответствующих римских символов
syb = [
"M", "CM", "D", "CD",
"C", "XC", "L", "XL",
"X", "IX", "V", "IV",
"I"
]
# Инициализируем пустую строку для результата
roman_num = ''
while num:
    for i,n in enumerate(val):
        if num-n>=0:
            roman_num += syb[i]
            num-=n
            break
print(roman_num)
roman_num = ''
i = 0
while num1 > 0:
    # Выполняем цикл для текущего значения в массиве val
    for _ in range(num1 // val[i]): # num // val[i] дает количество   раз, которое val[i] помещается в num
        roman_num += syb[i] # Добавляем соответствующий римский     символ в результат
        num1 -= val[i] # Уменьшаем значение num на val[i]
    i += 1 # Переходим к следующему значению в массиве
    # Печатаем результат
print("Результат:", roman_num)

# Задача 4. 
# Сумма и произведение дробей
# Программа принимает две строки вида "a/b" - дробь с числителем и
# знаменателем. Возвращает сумму и произведение дробей. Для проверки
# используется модуль fractions.

# Импортируем класс Fraction из модуля fractions
from fractions import Fraction
# Вводим первую дробь
frac1 = input("Введите первую дробь (a/b): ")
# Вводим вторую дробь
frac2 = input("Введите вторую дробь (a/b): ")
# Разделяем строки и преобразуем числитель и знаменатель первой дроби в целые числа
numerator1, denominator1 = map(int, frac1.split('/'))
# Разделяем строки и преобразуем числитель и знаменатель второй дроби в целые числа
numerator2, denominator2 = map(int, frac2.split('/'))
# Создаем объекты Fraction для первой и второй дроби
f1 = Fraction(numerator1, denominator1)
f2 = Fraction(numerator2, denominator2)
# Находим сумму дробей
sum_frac = f1 + f2
# Находим произведение дробей
product_frac = f1 * f2
# Выводим результат суммы дробей
print("Сумма:", sum_frac)
# Выводим результат произведения дробей
print("Произведение:", product_frac)